import java.util.Base64

plugins {
    id 'java'
    id 'java-library'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

group = 'io.github.kyungmin08g'
version = '0.0.1'

java {
    withSourcesJar()
    withJavadocJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'Seaphyr'
                description = 'Spring AOP 기반 로깅 라이브러리'
                url = 'https://github.com/kyungmin08g/Seaphyr'
                licenses { license { name = 'MIT'; url = 'https://opensource.org/licenses/MIT' } }
                developers {
                    developer {
                        setId('kyungmin08g')
                        setName('KyungMin')
                        setEmail('k.kyungmin2892@gmail.com')
                    }
                }
                scm {
                    setConnection('scm:git:git://github.com/kyungmin08g/Seaphyr.git')
                    setDeveloperConnection('scm:git:ssh://github.com:kyungmin08g/Seaphyr.git')
                    setUrl('https://github.com/kyungmin08g/Seaphyr')
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri('https://ossrh-staging-api.central.sonatype.com/service/local/'))
            snapshotRepositoryUrl.set(uri('https://s01.oss.sonatype.org/content/repositories/snapshots/'))
            username.set(System.getenv("SONATYPE_USERNAME"))
            password.set(System.getenv("SONATYPE_PASSWORD"))
        }
    }
}

def gpgKeyBase64 = project.findProperty("gpg_private_key")
def gpgKey = ''

if (gpgKeyBase64 != null && !gpgKeyBase64.isEmpty()) {
    byte[] decodedBytes = Base64.decoder.decode(gpgKeyBase64)
    gpgKey = new String(decodedBytes, 'UTF-8')
} else {
    throw new GradleException("GPG_PRIVATE_KEY is not set or empty")
}

signing {
//    println("GPG_PRIVATE_KEY is set? " + (project.findProperty("gpg_private_key") != null))
//    println("GPG_PASSPHRASE is set? " + (project.findProperty("gpg_passphrase") != null))
    println("GPG_PRIVATE_KEY is set? " + (System.getenv("GPG_PRIVATE_KEY") != null))
    println("GPG_PASSPHRASE is set? " + (System.getenv("GPG_PASSPHRASE") != null))

    useInMemoryPgpKeys(
        System.getenv('SIGNING_KEY_ID'),
        gpgKey,
        System.getenv('GPG_PASSPHRASE')
    )

    sign publishing.publications.mavenJava
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:3.5.3'
    implementation 'org.springframework.boot:spring-boot-starter-aop:3.5.3'
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.5.3'
//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
//    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.0'
}

test { useJUnitPlatform() }
